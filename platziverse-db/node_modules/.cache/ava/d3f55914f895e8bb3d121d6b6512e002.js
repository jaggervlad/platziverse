'use strict';

const test = require('ava');

const sinon = require('sinon');

const proxyrequire = require('proxyquire');

const agentFixtures = require('./fixtures/agent');

const metricFixtures = require('./fixtures/metric');

let config = {
  logging: function () {}
};
const AgentStub = {
  hasMany: sinon.spy()
};
const uuid = 'yyy-yyy-yyy';
const invalidUuid = 'xxx-xxx-xxx';
const type = 'metric type';
let MetricStub = null;
let db = null;
let sandbox = null;
let uuidArgs = {
  attributes: ['type'],
  group: ['type'],
  include: [{
    attributes: [],
    model: AgentStub,
    where: {
      uuid
    }
  }],
  raw: true
};
let uuidAgentArgs = {
  where: {
    uuid
  }
};
let invalidUuidAgentArgs = {
  where: {
    uuid: invalidUuid
  }
};
let typeUuidArgs = {
  attributes: ['id', 'type', 'value', 'createdAt'],
  where: {
    type
  },
  limit: 20,
  order: [['createdAt', 'DESC']],
  include: [{
    attributes: [],
    model: AgentStub,
    where: {
      uuid
    }
  }],
  raw: true
};
let newMetric = {
  type: 'metric type',
  value: 'This is some random value for a metric',
  agentId: 1
};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  MetricStub = {
    belongsTo: sandbox.spy()
  };
  const setupDatabase = proxyrequire('../', {
    './models/agent': () => AgentStub,
    './models/metric': () => MetricStub
  });
  db = await setupDatabase(config);
});
test.afterEach(() => {
  sandbox && sinon.resetHistory();
});
test('Metric', t => {
  t.truthy(db.Metric, 'Metric service should exist');
});
//# sourceMappingURL=C:\Users\USER\Desktop\platziverse\platziverse-db\node_modules\.cache\ava\d3f55914f895e8bb3d121d6b6512e002.js.map