{"version":3,"sources":["tests\\metric-tests.js"],"names":["test","require","sinon","proxyrequire","agentFixtures","metricFixtures","config","logging","AgentStub","hasMany","spy","uuid","invalidUuid","type","MetricStub","db","sandbox","uuidArgs","attributes","group","include","model","where","raw","uuidAgentArgs","invalidUuidAgentArgs","typeUuidArgs","limit","order","newMetric","value","agentId","beforeEach","createSandbox","belongsTo","create","stub","withArgs","returns","Promise","resolve","toJSON","findAll","byUuid","byTypeUuid","findOne","setupDatabase","afterEach","resetHistory","t","truthy","Metric","serial","true","called","calledWith","metric","calledOnce","deepEqual","metrics","findByAgentUuid","findByTypeAgentUuid"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,YAAD,CAA5B;;AAEA,MAAMG,aAAa,GAAGH,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,mBAAD,CAA9B;;AAEA,IAAIK,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAY,CAAE;AADZ,CAAb;AAIA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAEP,KAAK,CAACQ,GAAN;AADO,CAAlB;AAIA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,WAAW,GAAG,aAAlB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AAGA,IAAIC,QAAQ,GAAG;AACXC,EAAAA,UAAU,EAAE,CAAC,MAAD,CADD;AAEXC,EAAAA,KAAK,EAAE,CAAC,MAAD,CAFI;AAGXC,EAAAA,OAAO,EAAE,CAAC;AACNF,IAAAA,UAAU,EAAE,EADN;AAENG,IAAAA,KAAK,EAAEb,SAFD;AAGNc,IAAAA,KAAK,EAAE;AACHX,MAAAA;AADG;AAHD,GAAD,CAHE;AAUXY,EAAAA,GAAG,EAAE;AAVM,CAAf;AAaA,IAAIC,aAAa,GAAG;AAChBF,EAAAA,KAAK,EAAE;AACHX,IAAAA;AADG;AADS,CAApB;AAMA,IAAIc,oBAAoB,GAAG;AACvBH,EAAAA,KAAK,EAAE;AACHX,IAAAA,IAAI,EAAEC;AADH;AADgB,CAA3B;AAMA,IAAIc,YAAY,GAAG;AACfR,EAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,MAAP,EAAe,OAAf,EAAwB,WAAxB,CADG;AAEfI,EAAAA,KAAK,EAAE;AACLT,IAAAA;AADK,GAFQ;AAKfc,EAAAA,KAAK,EAAE,EALQ;AAMfC,EAAAA,KAAK,EAAE,CAAC,CAAC,WAAD,EAAc,MAAd,CAAD,CANQ;AAOfR,EAAAA,OAAO,EAAE,CAAC;AACRF,IAAAA,UAAU,EAAE,EADJ;AAERG,IAAAA,KAAK,EAAEb,SAFC;AAGRc,IAAAA,KAAK,EAAE;AACLX,MAAAA;AADK;AAHC,GAAD,CAPM;AAcfY,EAAAA,GAAG,EAAE;AAdU,CAAnB;AAiBA,IAAIM,SAAS,GAAG;AACZhB,EAAAA,IAAI,EAAE,aADM;AAEZiB,EAAAA,KAAK,EAAE,wCAFK;AAGZC,EAAAA,OAAO,EAAE;AAHG,CAAhB,C,CAMA;;AACA/B,IAAI,CAACgC,UAAL,CAAgB,YAAY;AAC1BhB,EAAAA,OAAO,GAAGd,KAAK,CAAC+B,aAAN,EAAV;AAEAnB,EAAAA,UAAU,GAAG;AACToB,IAAAA,SAAS,EAAElB,OAAO,CAACN,GAAR;AADF,GAAb,CAH0B,CAO1B;;AACAI,EAAAA,UAAU,CAACqB,MAAX,GAAoBnB,OAAO,CAACoB,IAAR,EAApB;AACAtB,EAAAA,UAAU,CAACqB,MAAX,CAAkBE,QAAlB,CAA2BR,SAA3B,EAAsCS,OAAtC,CAA8CC,OAAO,CAACC,OAAR,CAAgB;AAC1DC,IAAAA,MAAM,GAAI;AAAE,aAAOZ,SAAP;AAAiB;;AAD6B,GAAhB,CAA9C,EAT0B,CAa1B;;AACAf,EAAAA,UAAU,CAAC4B,OAAX,GAAqB1B,OAAO,CAACoB,IAAR,EAArB;AACAtB,EAAAA,UAAU,CAAC4B,OAAX,CAAmBL,QAAnB,CAA4BpB,QAA5B,EAAsCqB,OAAtC,CAA8CC,OAAO,CAACC,OAAR,CAAgBnC,cAAc,CAACsC,MAAf,CAAsBhC,IAAtB,CAAhB,CAA9C;AACAG,EAAAA,UAAU,CAAC4B,OAAX,CAAmBL,QAAnB,CAA4BX,YAA5B,EAA0CY,OAA1C,CAAkDC,OAAO,CAACC,OAAR,CAAgBnC,cAAc,CAACuC,UAAf,CAA0B/B,IAA1B,EAAgCF,IAAhC,CAAhB,CAAlD,EAhB0B,CAkB1B;;AACAH,EAAAA,SAAS,CAACqC,OAAV,GAAoB7B,OAAO,CAACoB,IAAR,EAApB;AACA5B,EAAAA,SAAS,CAACqC,OAAV,CAAkBR,QAAlB,CAA2Bb,aAA3B,EAA0Cc,OAA1C,CAAkDC,OAAO,CAACC,OAAR,CAAgBpC,aAAa,CAACuC,MAAd,CAAqBhC,IAArB,CAAhB,CAAlD;AACAH,EAAAA,SAAS,CAACqC,OAAV,CAAkBR,QAAlB,CAA2BZ,oBAA3B,EAAiDa,OAAjD,CAAyDC,OAAO,CAACC,OAAR,CAAgBpC,aAAa,CAACuC,MAAd,CAAqB/B,WAArB,CAAhB,CAAzD;AAEA,QAAMkC,aAAa,GAAG3C,YAAY,CAAC,KAAD,EAAQ;AACtC,sBAAmB,MAAMK,SADa;AAEtC,uBAAoB,MAAMM;AAFY,GAAR,CAAlC;AAKAC,EAAAA,EAAE,GAAG,MAAM+B,aAAa,CAACxC,MAAD,CAAxB;AACD,CA7BD,E,CA+BA;;AACAN,IAAI,CAAC+C,SAAL,CAAe,MAAM;AACjB/B,EAAAA,OAAO,IAAId,KAAK,CAAC8C,YAAN,EAAX;AACH,CAFD,E,CAIA;;AACAhD,IAAI,CAAC,QAAD,EAAWiD,CAAC,IAAI;AAChBA,EAAAA,CAAC,CAACC,MAAF,CAASnC,EAAE,CAACoC,MAAZ,EAAoB,6BAApB;AACH,CAFG,CAAJ;AAIAnD,IAAI,CAACoD,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AACtBA,EAAAA,CAAC,CAACI,IAAF,CAAO7C,SAAS,CAACC,OAAV,CAAkB6C,MAAzB,EAAiC,gCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAO7C,SAAS,CAACC,OAAV,CAAkB8C,UAAlB,CAA6BzC,UAA7B,CAAP,EAAiD,mCAAjD;AACAmC,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAACoB,SAAX,CAAqBoB,MAA5B,EAAoC,kCAApC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAACoB,SAAX,CAAqBqB,UAArB,CAAgC/C,SAAhC,CAAP,EAAmD,kCAAnD;AACH,CALD;AAOAR,IAAI,CAACoD,MAAL,CAAY,8BAAZ,EAA4C,MAAMH,CAAN,IAAW;AACnD,MAAIO,MAAM,GAAG,MAAMzC,EAAE,CAACoC,MAAH,CAAUhB,MAAV,CAAiBxB,IAAjB,EAAuBkB,SAAvB,CAAnB;AAEAoB,EAAAA,CAAC,CAACI,IAAF,CAAO7C,SAAS,CAACqC,OAAV,CAAkBS,MAAzB,EAAiC,mCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAO7C,SAAS,CAACqC,OAAV,CAAkBY,UAAzB,EAAqC,+BAArC;AACAR,EAAAA,CAAC,CAACI,IAAF,CAAO7C,SAAS,CAACqC,OAAV,CAAkBU,UAAlB,CAA6B/B,aAA7B,CAAP,EAAoD,uCAApD;AAEAyB,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAACqB,MAAX,CAAkBmB,MAAzB,EAAiC,iCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAACqB,MAAX,CAAkBsB,UAAzB,EAAqC,6BAArC;AACAR,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAACqB,MAAX,CAAkBoB,UAAlB,CAA6B1B,SAA7B,CAAP,EAAgD,2CAAhD;AAEAoB,EAAAA,CAAC,CAACS,SAAF,CAAYF,MAAZ,EAAoB3B,SAApB,EAA+B,2BAA/B;AACH,CAZD;AAcA7B,IAAI,CAACoD,MAAL,CAAY,uCAAZ,EAAqD,MAAMH,CAAN,IAAW;AAC5D,MAAIO,MAAM,GAAG,MAAMzC,EAAE,CAACoC,MAAH,CAAUhB,MAAV,CAAiBvB,WAAjB,EAA8BiB,SAA9B,CAAnB;AAEAoB,EAAAA,CAAC,CAACI,IAAF,CAAO7C,SAAS,CAACqC,OAAV,CAAkBS,MAAzB,EAAiC,mCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAO7C,SAAS,CAACqC,OAAV,CAAkBY,UAAzB,EAAqC,+BAArC;AACAR,EAAAA,CAAC,CAACI,IAAF,CAAO7C,SAAS,CAACqC,OAAV,CAAkBU,UAAlB,CAA6B9B,oBAA7B,CAAP,EAA2D,uCAA3D;AAEAwB,EAAAA,CAAC,CAACS,SAAF,CAAYF,MAAZ,EAAoBpD,aAAa,CAACuC,MAAd,CAAqB/B,WAArB,CAApB,EAAuD,2BAAvD;AACH,CARD;AAUAZ,IAAI,CAACoD,MAAL,CAAY,wBAAZ,EAAsC,MAAMH,CAAN,IAAW;AAC7C,MAAIU,OAAO,GAAG,MAAM5C,EAAE,CAACoC,MAAH,CAAUS,eAAV,CAA0BjD,IAA1B,CAApB;AAEAsC,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAAC4B,OAAX,CAAmBY,MAA1B,EAAkC,uCAAlC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAAC4B,OAAX,CAAmBe,UAA1B,EAAsC,mCAAtC;AACAR,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAAC4B,OAAX,CAAmBa,UAAnB,CAA8BtC,QAA9B,CAAP,EAAgD,iDAAhD;AAEAgC,EAAAA,CAAC,CAACS,SAAF,CAAYC,OAAZ,EAAqBtD,cAAc,CAACsC,MAAf,CAAsBhC,IAAtB,CAArB,EAAkD,4BAAlD;AACH,CARD;AAUAX,IAAI,CAACoD,MAAL,CAAY,4BAAZ,EAA0C,MAAMH,CAAN,IAAW;AACjD,MAAIU,OAAO,GAAG,MAAM5C,EAAE,CAACoC,MAAH,CAAUU,mBAAV,CAA8BhD,IAA9B,EAAoCF,IAApC,CAApB;AAEAsC,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAAC4B,OAAX,CAAmBY,MAA1B,EAAkC,mCAAlC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAAC4B,OAAX,CAAmBe,UAA1B,EAAsC,+BAAtC;AACAR,EAAAA,CAAC,CAACI,IAAF,CAAOvC,UAAU,CAAC4B,OAAX,CAAmBa,UAAnB,CAA8B7B,YAA9B,CAAP,EAAoD,8CAApD;AAEAuB,EAAAA,CAAC,CAACS,SAAF,CAAYC,OAAZ,EAAqBtD,cAAc,CAACuC,UAAf,CAA0B/B,IAA1B,EAAgCF,IAAhC,CAArB,EAA4D,4BAA5D;AACD,CARH","sourceRoot":"C:\\Users\\USER\\Desktop\\platziverse\\platziverse-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyrequire = require('proxyquire')\r\n\r\nconst agentFixtures = require('./fixtures/agent')\r\nconst metricFixtures = require('./fixtures/metric')\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nconst AgentStub = {\r\n  hasMany: sinon.spy()\r\n}\r\n\r\nlet uuid = 'yyy-yyy-yyy'\r\nlet invalidUuid = 'xxx-xxx-xxx'\r\nlet type = 'metric type'\r\nlet MetricStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\n\r\nlet uuidArgs = {\r\n    attributes: ['type'],\r\n    group: ['type'],\r\n    include: [{\r\n        attributes: [],\r\n        model: AgentStub,\r\n        where: {\r\n            uuid\r\n        }\r\n    }],\r\n    raw: true\r\n}\r\n\r\nlet uuidAgentArgs = {\r\n    where: {\r\n        uuid\r\n    }\r\n}\r\n\r\nlet invalidUuidAgentArgs = {\r\n    where: {\r\n        uuid: invalidUuid\r\n    }\r\n}\r\n\r\nlet typeUuidArgs = {\r\n    attributes: ['id', 'type', 'value', 'createdAt'],\r\n    where: {\r\n      type\r\n    },\r\n    limit: 20,\r\n    order: [['createdAt', 'DESC']],\r\n    include: [{\r\n      attributes: [],\r\n      model: AgentStub,\r\n      where: {\r\n        uuid\r\n      }\r\n    }],\r\n    raw: true\r\n  }\r\n\r\nlet newMetric = {\r\n    type: 'metric type',\r\n    value: 'This is some random value for a metric',\r\n    agentId: 1\r\n}\r\n\r\n// Metodo para crear stub\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n  \r\n  MetricStub = {\r\n      belongsTo: sandbox.spy()\r\n  }\r\n\r\n  //Metric create stub\r\n  MetricStub.create = sandbox.stub()\r\n  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({\r\n      toJSON () { return newMetric}\r\n  }))\r\n\r\n  //Metric findAll stub\r\n  MetricStub.findAll = sandbox.stub()\r\n  MetricStub.findAll.withArgs(uuidArgs).returns(Promise.resolve(metricFixtures.byUuid(uuid)))\r\n  MetricStub.findAll.withArgs(typeUuidArgs).returns(Promise.resolve(metricFixtures.byTypeUuid(type, uuid)))\r\n\r\n  //Agent findOne stub\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(uuidAgentArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\r\n  AgentStub.findOne.withArgs(invalidUuidAgentArgs).returns(Promise.resolve(agentFixtures.byUuid(invalidUuid)))\r\n\r\n  const setupDatabase = proxyrequire('../', {\r\n      './models/agent' : () => AgentStub,\r\n      './models/metric' : () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\n// Reset de los stubs\r\ntest.afterEach(() => {\r\n    sandbox && sinon.resetHistory()\r\n})\r\n\r\n// Comprobando que se esta llamando al modelo del servicio\r\ntest('Metric', t => {\r\n    t.truthy(db.Metric, 'Metric service should exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was excuted')\r\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricStub')\r\n    t.true(MetricStub.belongsTo.called, 'MetricMode.belongsTo was excuted')\r\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\r\n})\r\n\r\ntest.serial('Metric#create - agent exists', async t => {\r\n    let metric = await db.Metric.create(uuid, newMetric)\r\n\r\n    t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n    t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\r\n    t.true(AgentStub.findOne.calledWith(uuidAgentArgs), 'finOne shoul be called with uuid args')\r\n\r\n    t.true(MetricStub.create.called, 'create shoul be called on model')\r\n    t.true(MetricStub.create.calledOnce, 'create shoul be called once')\r\n    t.true(MetricStub.create.calledWith(newMetric), 'create shoul be called with specifie args')\r\n\r\n    t.deepEqual(metric, newMetric, 'Metric should be the same')\r\n})\r\n\r\ntest.serial('Metric#create - agent doesn\\'t exists', async t => {\r\n    let metric = await db.Metric.create(invalidUuid, newMetric)\r\n\r\n    t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n    t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\r\n    t.true(AgentStub.findOne.calledWith(invalidUuidAgentArgs), 'finOne shoul be called with uuid args')\r\n\r\n    t.deepEqual(metric, agentFixtures.byUuid(invalidUuid), 'Metric should be the same')\r\n})\r\n\r\ntest.serial('Metric#findByAgentUuid', async t => {\r\n    let metrics = await db.Metric.findByAgentUuid(uuid)\r\n\r\n    t.true(MetricStub.findAll.called, 'findAll should be the called on Model')\r\n    t.true(MetricStub.findAll.calledOnce, 'findAll should be the called once')\r\n    t.true(MetricStub.findAll.calledWith(uuidArgs), 'findAll should be the called with specifie args')\r\n\r\n    t.deepEqual(metrics, metricFixtures.byUuid(uuid), 'Metrics should be the same')\r\n})\r\n\r\ntest.serial('Metric#findByTypeAgentUuid', async t => {\r\n    let metrics = await db.Metric.findByTypeAgentUuid(type, uuid)\r\n  \r\n    t.true(MetricStub.findAll.called, 'findAll should be called on model')\r\n    t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')\r\n    t.true(MetricStub.findAll.calledWith(typeUuidArgs), 'findAll should be called with specified args')\r\n  \r\n    t.deepEqual(metrics, metricFixtures.byTypeUuid(type, uuid), 'metrics should be the same')\r\n  })"]}