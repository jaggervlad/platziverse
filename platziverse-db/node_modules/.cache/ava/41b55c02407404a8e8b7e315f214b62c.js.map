{"version":3,"sources":["tests\\fixtures\\metric.js"],"names":["agentFixtures","require","metric","id","type","value","agent","byUuid","createdAt","Date","updatedAt","metrics","extend","obj","clone","Object","assign","byTypeUuid","uuid","filter","m","map","module","exports","single","all","shift"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,SAAD,CAA7B;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,EAAE,EAAE,CADS;AAEbC,EAAAA,IAAI,EAAE,aAFO;AAGbC,EAAAA,KAAK,EAAE,8BAHM;AAIbC,EAAAA,KAAK,EAAEN,aAAa,CAACO,MAAd,CAAqB,aAArB,CAJM;AAKbC,EAAAA,SAAS,EAAE,IAAIC,IAAJ,EALE;AAMbC,EAAAA,SAAS,EAAE,IAAID,IAAJ;AANE,CAAf;AASA,MAAME,OAAO,GAAG,CACdT,MADc,EAEdU,MAAM,CAACV,MAAD,EAAS;AAAEC,EAAAA,EAAE,EAAE;AAAN,CAAT,CAFQ,EAGdS,MAAM,CAACV,MAAD,EAAS;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE;AAAf,CAAT,CAHQ,EAIdQ,MAAM,CAACV,MAAD,EAAS;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASG,EAAAA,KAAK,EAAEN,aAAa,CAACO,MAAd,CAAqB,aAArB;AAAhB,CAAT,CAJQ,EAKdK,MAAM,CAACV,MAAD,EAAS;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE,aAAf;AAA8BE,EAAAA,KAAK,EAAEN,aAAa,CAACO,MAAd,CAAqB,aAArB;AAArC,CAAT,CALQ,CAAhB;;AAQA,SAASK,MAAT,CAAiBC,GAAjB,EAAsBR,KAAtB,EAA6B;AAC3B,QAAMS,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,GAAlB,CAAd;AACA,SAAOE,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBT,KAArB,CAAP;AACD;;AAED,SAASY,UAAT,CAAqBb,IAArB,EAA2Bc,IAA3B,EAAiC;AAC/B,SAAOP,OAAO,CAACQ,MAAR,CAAeC,CAAC,IAAIA,CAAC,CAAChB,IAAF,KAAWA,IAAX,IAAmBgB,CAAC,CAACd,KAAF,CAAQY,IAAR,KAAiBA,IAAxD,EACJG,GADI,CACAD,CAAC,IAAI;AACR,UAAMN,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBI,CAAlB,CAAd;AACA,WAAON,KAAK,CAACR,KAAb;AACA,WAAOQ,KAAP;AACD,GALI,CAAP;AAMD;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,EAAEtB,MADO;AAEfuB,EAAAA,GAAG,EAAEd,OAFU;AAGfM,EAAAA,UAHe;AAIfV,EAAAA,MAAM,EAAEW,IAAI,IAAIP,OAAO,CAACQ,MAAR,CAAeC,CAAC,IAAIA,CAAC,CAACd,KAAF,CAAQY,IAAR,KAAiBA,IAArC,EAA2CQ,KAA3C;AAJD,CAAjB","sourceRoot":"C:\\Users\\USER\\Desktop\\platziverse\\platziverse-db","sourcesContent":["'use strict'\r\n\r\nconst agentFixtures = require('./agent')\r\n\r\nconst metric = {\r\n  id: 1,\r\n  type: 'metric type',\r\n  value: 'some random value for metric',\r\n  agent: agentFixtures.byUuid('yyy-yyy-yyy'),\r\n  createdAt: new Date(),\r\n  updatedAt: new Date()\r\n}\r\n\r\nconst metrics = [\r\n  metric,\r\n  extend(metric, { id: 2 }),\r\n  extend(metric, { id: 3, type: 'Another type' }),\r\n  extend(metric, { id: 4, agent: agentFixtures.byUuid('yyy-yyy-yyx') }),\r\n  extend(metric, { id: 5, type: 'random type', agent: agentFixtures.byUuid('yyy-yyy-yyx') })\r\n]\r\n\r\nfunction extend (obj, value) {\r\n  const clone = Object.assign({}, obj)\r\n  return Object.assign(clone, value)\r\n}\r\n\r\nfunction byTypeUuid (type, uuid) {\r\n  return metrics.filter(m => m.type === type && m.agent.uuid === uuid)\r\n    .map(m => {\r\n      const clone = Object.assign({}, m)\r\n      delete clone.agent\r\n      return clone\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n  single: metric,\r\n  all: metrics,\r\n  byTypeUuid,\r\n  byUuid: uuid => metrics.filter(m => m.agent.uuid === uuid).shift()\r\n}"]}