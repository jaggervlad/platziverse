{"version":3,"sources":["tests\\metric-tests.js"],"names":["test","require","sinon","proxyrequire","agentFixtures","metricFixtures","config","logging","AgentStub","hasMany","spy","uuid","invalidUuid","type","MetricStub","db","sandbox","uuidArgs","attributes","group","include","model","where","raw","uuidAgentArgs","invalidUuidAgentArgs","typeUuidArgs","limit","order","newMetric","value","agentId","beforeEach","createSandbox","belongsTo","setupDatabase","afterEach","resetHistory","t","truthy","Metric","serial","true","called","calledWith","metric","create","findOne","calledOnce","deepEqual"],"mappings":"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","sourceRoot":"C:\\Users\\USER\\Desktop\\platziverse\\platziverse-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyrequire = require('proxyquire')\r\n\r\nconst agentFixtures = require('./fixtures/agent')\r\nconst metricFixtures = require('./fixtures/metric')\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nconst AgentStub = {\r\n  hasMany: sinon.spy()\r\n}\r\n\r\nconst uuid = 'yyy-yyy-yyy'\r\nconst invalidUuid = 'xxx-xxx-xxx'\r\nconst type = 'metric type'\r\nlet MetricStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\n\r\nlet uuidArgs = {\r\n    attributes: ['type'],\r\n    group: ['type'],\r\n    include: [{\r\n        attributes: [],\r\n        model: AgentStub,\r\n        where: {\r\n            uuid\r\n        }\r\n    }],\r\n    raw: true\r\n}\r\n\r\nlet uuidAgentArgs = {\r\n    where: {\r\n        uuid\r\n    }\r\n}\r\n\r\nlet invalidUuidAgentArgs = {\r\n    where: {\r\n        uuid: invalidUuid\r\n    }\r\n}\r\n\r\nlet typeUuidArgs = {\r\n    attributes: ['id','type','value','createdAt'],\r\n    where: {\r\n        type\r\n    },\r\n    limit: 20,\r\n    order: [['createdAt','DESC']],\r\n    include: [{\r\n        attributes: [],\r\n        model: AgentStub,\r\n        where: {\r\n            uuid\r\n        }\r\n    }],\r\n    raw: true\r\n}\r\n\r\nlet newMetric = {\r\n    type: 'metric type',\r\n    value: 'This is some random value for a metric',\r\n    agentId: 1\r\n}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n  \r\n  MetricStub = {\r\n      belongsTo: sandbox.spy()\r\n  }\r\n\r\n  const setupDatabase = proxyrequire('../', {\r\n      './models/agent' : () => AgentStub,\r\n      './models/metric' : () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n    sandbox && sinon.resetHistory()\r\n})\r\n\r\ntest('Metric', t => {\r\n    t.truthy(db.Metric, 'Metric service should exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was excuted')\r\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricStub')\r\n    t.true(MetricStub.belongsTo.called, 'MetricMode.belongsTo was excuted')\r\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\r\n})\r\n\r\ntest.serial('Metric#create - agent exists', async t => {\r\n    let metric = await db.Metric.create(uuid, newMetric)\r\n\r\n    t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n    t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\r\n    t.true(AgentStub.findOne.calledWith(uuidAgentArgs), 'finOne shoul be called with uuid args')\r\n\r\n    t.true(MetricStub.create.called, 'create shoul be called on model')\r\n    t.true(MetricStub.create.calledOnce, 'create shoul be called once')\r\n    t.true(MetricStub.create.calledWith(newMetric), 'create shoul be called with specifie args')\r\n\r\n    t.deepEqual(metric, newMetric, 'Metric should be the same')\r\n})"]}