'use strict';

const test = require('ava');

const sinon = require('sinon');

const proxyrequire = require('proxyquire');

const agentFixtures = require('./fixtures/agent');

const metricFixtures = require('./fixtures/metric');

let config = {
  logging: function () {}
};
const AgentStub = {
  hasMany: sinon.spy()
};
let uuid = 'yyy-yyy-yyy';
let invalidUuid = 'xxx-xxx-xxx';
let type = 'metric type';
let MetricStub = null;
let db = null;
let sandbox = null;
let uuidArgs = {
  attributes: ['type'],
  group: ['type'],
  include: [{
    attributes: [],
    model: AgentStub,
    where: {
      uuid
    }
  }],
  raw: true
};
let uuidAgentArgs = {
  where: {
    uuid
  }
};
let invalidUuidAgentArgs = {
  where: {
    uuid: invalidUuid
  }
};
let typeUuidArgs = {
  attributes: ['id', 'type', 'value', 'createdAt'],
  where: {
    type
  },
  limit: 20,
  order: [['createdAt', 'DESC']],
  include: [{
    attributes: [],
    model: AgentStub,
    where: {
      uuid
    }
  }],
  raw: true
};
let newMetric = {
  type: 'metric type',
  value: 'This is some random value for a metric',
  agentId: 1
}; // Metodo para crear stub

test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  MetricStub = {
    belongsTo: sandbox.spy()
  }; //Metric create stub

  MetricStub.create = sandbox.stub();
  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({
    toJSON() {
      return newMetric;
    }

  })); //Metric findAll stub

  MetricStub.findAll = sandbox.stub();
  MetricStub.findAll.withArgs(uuidArgs).returns(Promise.resolve(metricFixtures.byUuid(uuid)));
  MetricStub.findAll.withArgs(typeUuidArgs).returns(Promise.resolve(metricFixtures.byTypeUuid(type, uuid))); //Agent findOne stub

  AgentStub.findOne = sandbox.stub();
  AgentStub.findOne.withArgs(uuidAgentArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)));
  AgentStub.findOne.withArgs(invalidUuidAgentArgs).returns(Promise.resolve(agentFixtures.byUuid(invalidUuid)));
  const setupDatabase = proxyrequire('../', {
    './models/agent': () => AgentStub,
    './models/metric': () => MetricStub
  });
  db = await setupDatabase(config);
}); // Reset de los stubs

test.afterEach(() => {
  sandbox && sinon.resetHistory();
}); // Comprobando que se esta llamando al modelo del servicio

test('Metric', t => {
  t.truthy(db.Metric, 'Metric service should exist');
});
test.serial('Setup', t => {
  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was excuted');
  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricStub');
  t.true(MetricStub.belongsTo.called, 'MetricMode.belongsTo was excuted');
  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub');
});
test.serial('Metric#create - agent exists', async t => {
  let metric = await db.Metric.create(uuid, newMetric);
  t.true(AgentStub.findOne.called, 'findOne should be called on model');
  t.true(AgentStub.findOne.calledOnce, 'findOne should be called once');
  t.true(AgentStub.findOne.calledWith(uuidAgentArgs), 'finOne shoul be called with uuid args');
  t.true(MetricStub.create.called, 'create shoul be called on model');
  t.true(MetricStub.create.calledOnce, 'create shoul be called once');
  t.true(MetricStub.create.calledWith(newMetric), 'create shoul be called with specifie args');
  t.deepEqual(metric, newMetric, 'Metric should be the same');
});
test.serial('Metric#create - agent doesn\'t exists', async t => {
  let metric = await db.Metric.create(invalidUuid, newMetric);
  t.true(AgentStub.findOne.called, 'findOne should be called on model');
  t.true(AgentStub.findOne.calledOnce, 'findOne should be called once');
  t.true(AgentStub.findOne.calledWith(invalidUuidAgentArgs), 'finOne shoul be called with uuid args');
  t.deepEqual(metric, agentFixtures.byUuid(invalidUuid), 'Metric should be the same');
});
test.serial('Metric#findByAgentUuid', async t => {
  let metrics = await db.Metric.findByAgentUuid(uuid);
  t.true(MetricStub.findAll.called, 'findAll should be the called on Model');
  t.true(MetricStub.findAll.calledOnce, 'findAll should be the called once');
  t.true(MetricStub.findAll.calledWith(uuidArgs), 'findAll should be the called with specifie args');
  t.deepEqual(metrics, metricFixtures.byUuid(uuid), 'Metrics should be the same');
});
test.serial('Metric#findByTypeAgentUuid', async t => {
  let metrics = await db.Metric.findByTypeAgentUuid(type, uuid);
  t.true(MetricStub.findAll.called, 'findAll should be the called on Model');
  t.true(MetricStub.findAll.calledOnce, 'findAll should be the called once');
  t.true(MetricStub.findAll.calledWith(typeUuidArgs), 'findAll should be the called with specifie args');
  t.deepEqual(metrics, metricFixtures.byTypeUuid(type, uuid), 'Metrics should be the same');
});
//# sourceMappingURL=C:\Users\USER\Desktop\platziverse\platziverse-db\node_modules\.cache\ava\cab5f9605b617e7ece2c3a8352ccdbb8.js.map