{"version":3,"sources":["tests\\agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","uuid","AgentStub","db","sandbox","uuidArgs","where","beforeEach","createSandbox","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","findById","byId","setupDatabase","afterEach","resetHistory","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,kBAAD,CAA7B;;AAEA,MAAMI,MAAM,GAAG;AACbC,EAAAA,OAAO,GAAI,CAAE;;AADA,CAAf;AAIA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAEN,KAAK,CAACO,GAAN;AADM,CAAnB;AAIA,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,aAAa,CAACM,MAAhC,CAAf;AACA,MAAMG,EAAE,GAAG,CAAX;AACA,MAAMC,IAAI,GAAG,aAAb;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AAEA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAE;AACLL,IAAAA;AADK;AADM,CAAf;AAMAd,IAAI,CAACoB,UAAL,CAAgB,YAAY;AAC1BH,EAAAA,OAAO,GAAGf,KAAK,CAACmB,aAAN,EAAV;AAEAN,EAAAA,SAAS,GAAG;AACVO,IAAAA,OAAO,EAAEL,OAAO,CAACR,GAAR;AADC,GAAZ,CAH0B,CAM1B;;AACAM,EAAAA,SAAS,CAACQ,OAAV,GAAoBN,OAAO,CAACO,IAAR,EAApB;AACAT,EAAAA,SAAS,CAACQ,OAAV,CAAkBE,QAAlB,CAA2BP,QAA3B,EAAqCQ,OAArC,CAA6CC,OAAO,CAACC,OAAR,CAAgBxB,aAAa,CAACyB,MAAd,CAAqBf,IAArB,CAAhB,CAA7C,EAR0B,CAU1B;;AACAC,EAAAA,SAAS,CAACe,QAAV,GAAqBb,OAAO,CAACO,IAAR,EAArB;AACAT,EAAAA,SAAS,CAACe,QAAV,CAAmBL,QAAnB,CAA4BZ,EAA5B,EAAgCa,OAAhC,CAAwCC,OAAO,CAACC,OAAR,CAAgBxB,aAAa,CAAC2B,IAAd,CAAmBlB,EAAnB,CAAhB,CAAxC,EAZ0B,CAc1B;;AACA,QAAMmB,aAAa,GAAG7B,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMY,SADc;AAEtC,uBAAmB,MAAMR;AAFa,GAAR,CAAhC;AAKAS,EAAAA,EAAE,GAAG,MAAMgB,aAAa,CAAC3B,MAAD,CAAxB;AACD,CArBD;AAuBAL,IAAI,CAACiC,SAAL,CAAe,MAAM;AACnBhB,EAAAA,OAAO,IAAIf,KAAK,CAACgC,YAAN,EAAX;AACD,CAFD;AAIAlC,IAAI,CAAC,OAAD,EAAUmC,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACC,MAAF,CAASpB,EAAE,CAACqB,KAAZ,EAAmB,6BAAnB;AACD,CAFG,CAAJ,C,CAIA;;AACArC,IAAI,CAACsC,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACI,IAAF,CAAOxB,SAAS,CAACO,OAAV,CAAkBkB,MAAzB,EAAiC,iCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOxB,SAAS,CAACO,OAAV,CAAkBmB,UAAlB,CAA6BlC,UAA7B,CAAP,EAAiD,oCAAjD;AACA4B,EAAAA,CAAC,CAACI,IAAF,CAAOhC,UAAU,CAACC,SAAX,CAAqBgC,MAA5B,EAAoC,oCAApC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOhC,UAAU,CAACC,SAAX,CAAqBiC,UAArB,CAAgC1B,SAAhC,CAAP,EAAmD,mCAAnD;AACD,CALD,E,CAOA;;AACAf,IAAI,CAACsC,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACvC,QAAMO,KAAK,GAAG,MAAM1B,EAAE,CAACqB,KAAH,CAASP,QAAT,CAAkBjB,EAAlB,CAApB;AAEAsB,EAAAA,CAAC,CAACI,IAAF,CAAOxB,SAAS,CAACe,QAAV,CAAmBU,MAA1B,EAAkC,oCAAlC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOxB,SAAS,CAACe,QAAV,CAAmBa,UAA1B,EAAsC,gCAAtC;AACAR,EAAAA,CAAC,CAACI,IAAF,CAAOxB,SAAS,CAACe,QAAV,CAAmBW,UAAnB,CAA8B5B,EAA9B,CAAP,EAA0C,4CAA1C;AAEAsB,EAAAA,CAAC,CAACS,SAAF,CAAYF,KAAZ,EAAmBtC,aAAa,CAAC2B,IAAd,CAAmBlB,EAAnB,CAAnB,EAA2C,oBAA3C;AACD,CARD,E,CAUA;;AACAb,IAAI,CAACsC,MAAL,CAAY,qCAAZ,EAAmD,MAAMH,CAAN,IAAW;AAC5D,QAAMO,KAAK,GAAG,MAAM1B,EAAE,CAACqB,KAAH,CAASQ,cAAT,CAAwBnC,MAAxB,CAApB;AAEAyB,EAAAA,CAAC,CAACS,SAAF,CAAYF,KAAZ,EAAmBhC,MAAnB,EAA2B,0BAA3B;AACD,CAJD","sourceRoot":"C:\\Users\\USER\\Desktop\\platziverse\\platziverse-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nconst config = {\r\n  logging () {}\r\n}\r\n\r\nconst MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nconst single = Object.assign({}, agentFixtures.single)\r\nconst id = 1\r\nconst uuid = 'yyy-yyy-yyy'\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\nlet uuidArgs = {\r\n  where: {\r\n    uuid\r\n  }\r\n}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n  // Modelo findOne y update Stub\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\r\n\r\n  // Modelo findById Stub\r\n  AgentStub.findById = sandbox.stub()\r\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\r\n\r\n  // Requerir los modelos con parametros por default\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sinon.resetHistory()\r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent service should exists')\r\n})\r\n\r\n// Tests para saber que los modelos estab bien relacionados en la DataBase\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})\r\n\r\n// Test para saber si el modelo Agent tiene el metodo findById\r\ntest.serial('Agent#findById', async t => {\r\n  const agent = await db.Agent.findById(id)\r\n\r\n  t.true(AgentStub.findById.called, 'findById should be called on model')\r\n  t.true(AgentStub.findById.calledOnce, 'findById should be called once')\r\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called whit specifie id')\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\r\n})\r\n\r\n// Test para saber si el modelo Agent tiene el metodo createOrUpdate()\r\ntest.serial('Agent#createOrUpdate where - exists', async t => {\r\n  const agent = await db.Agent.createOrUpdate(single)\r\n\r\n  t.deepEqual(agent, single, 'agent should be the same')\r\n})\r\n"]}