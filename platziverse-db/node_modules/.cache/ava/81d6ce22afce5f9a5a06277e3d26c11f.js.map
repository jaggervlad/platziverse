{"version":3,"sources":["tests\\agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","findById","stub","withArgs","returns","Promise","resolve","byId","setupDatabase","afterEach","resetHistory","t","truthy","Agent","serial","true","called","calledWith","agent","deepEqual"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,kBAAD,CAA7B;;AAEA,MAAMI,MAAM,GAAG;AACbC,EAAAA,OAAO,GAAI,CAAE;;AADA,CAAf;AAIA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAEN,KAAK,CAACO,GAAN;AADI,CAAjB;AAIA,IAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,aAAa,CAACM,MAAhC,CAAb;AACA,IAAIG,EAAE,GAAG,CAAT;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AAEAhB,IAAI,CAACiB,UAAL,CAAgB,YAAY;AAC1BD,EAAAA,OAAO,GAAGd,KAAK,CAACgB,aAAN,EAAV;AAEAJ,EAAAA,SAAS,GAAG;AACVK,IAAAA,OAAO,EAAEH,OAAO,CAACP,GAAR;AADC,GAAZ,CAH0B,CAO1B;;AACAK,EAAAA,SAAS,CAACM,QAAV,GAAqBJ,OAAO,CAACK,IAAR,EAArB;AACAP,EAAAA,SAAS,CAACM,QAAV,CAAmBE,QAAnB,CAA4BT,EAA5B,EAAgCU,OAAhC,CAAwCC,OAAO,CAACC,OAAR,CAAgBrB,aAAa,CAACsB,IAAd,CAAmBb,EAAnB,CAAhB,CAAxC;AACA,QAAMc,aAAa,GAAGxB,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMW,SADc;AAEtC,uBAAmB,MAAMP;AAFa,GAAR,CAAhC;AAKAQ,EAAAA,EAAE,GAAG,MAAMY,aAAa,CAACtB,MAAD,CAAxB;AACD,CAhBD;AAkBAL,IAAI,CAAC4B,SAAL,CAAe,MAAM;AACnBZ,EAAAA,OAAO,IAAId,KAAK,CAAC2B,YAAN,EAAX;AACD,CAFD;AAIA7B,IAAI,CAAC,OAAD,EAAU8B,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACC,MAAF,CAAShB,EAAE,CAACiB,KAAZ,EAAmB,6BAAnB;AACD,CAFG,CAAJ,C,CAIA;;AACAhC,IAAI,CAACiC,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACI,IAAF,CAAOpB,SAAS,CAACK,OAAV,CAAkBgB,MAAzB,EAAiC,iCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOpB,SAAS,CAACK,OAAV,CAAkBiB,UAAlB,CAA6B7B,UAA7B,CAAP,EAAiD,oCAAjD;AACAuB,EAAAA,CAAC,CAACI,IAAF,CAAO3B,UAAU,CAACC,SAAX,CAAqB2B,MAA5B,EAAoC,oCAApC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAO3B,UAAU,CAACC,SAAX,CAAqB4B,UAArB,CAAgCtB,SAAhC,CAAP,EAAmD,mCAAnD;AACD,CALD,E,CAOA;;AACAd,IAAI,CAACiC,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACvC,MAAIO,KAAK,GAAG,MAAMtB,EAAE,CAACiB,KAAH,CAASZ,QAAT,CAAkBP,EAAlB,CAAlB;AAEAiB,EAAAA,CAAC,CAACQ,SAAF,CAAYD,KAAZ,EAAmBjC,aAAa,CAACsB,IAAd,CAAmBb,EAAnB,CAAnB,EAA2C,oBAA3C;AACD,CAJD","sourceRoot":"C:\\Users\\USER\\Desktop\\platziverse\\platziverse-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nconst config = {\r\n  logging () {}\r\n}\r\n\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nlet single = Object.assign({}, agentFixtures.single)\r\nlet id = 1\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  //Modelo findById Stub\r\n  AgentStub.findById = sandbox.stub()\r\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sinon.resetHistory()\r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent service should exists')\r\n})\r\n\r\n//Tests para saber que los modelos estab bien relacionados en la DataBase\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})\r\n\r\n//Test para saber si el modelo Agent tiene el metodo findById\r\ntest.serial('Agent#findById', async t => {\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\r\n})"]}