{"version":3,"sources":["tests\\agent-tests.js"],"names":["test","require","sinon","proxyquire","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","setupDatabase","afterEach","resetHistory","t","truthy","Agent","serial","true","called"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMG,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,YAAY,CAAE;AADV,CAAf;AAIA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAEL,KAAK,CAACM,GAAN;AADM,CAAnB;AAIA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AAEAX,IAAI,CAACY,UAAL,CAAgB,YAAY;AAC1BD,EAAAA,OAAO,GAAGT,KAAK,CAACW,aAAN,EAAV;AAEAJ,EAAAA,SAAS,GAAG;AACVK,IAAAA,OAAO,EAAEH,OAAO,CAACH,GAAR;AADC,GAAZ;AAIA,QAAMO,aAAa,GAAGZ,UAAU,CAAC,KAAD,EAAQ;AACtC,sBAAkB,MAAMM,SADc;AAEtC,uBAAmB,MAAMH;AAFa,GAAR,CAAhC;AAKAI,EAAAA,EAAE,GAAG,MAAMK,aAAa,CAACX,MAAD,CAAxB;AACD,CAbD;AAeAJ,IAAI,CAACgB,SAAL,CAAe,MAAM;AACnBL,EAAAA,OAAO,IAAIA,OAAO,CAACM,YAAR,EAAX;AACD,CAFD;AAIAjB,IAAI,CAAC,OAAD,EAAUkB,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACC,MAAF,CAAST,EAAE,CAACU,KAAZ,EAAmB,6BAAnB;AACD,CAFG,CAAJ;AAIApB,IAAI,CAACqB,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACI,IAAF,CAAOb,SAAS,CAACK,OAAV,CAAkBS,MAAzB,EAAiC,iCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOhB,UAAU,CAACQ,OAAX,CAAmBS,MAA1B,EAAkC,oCAAlC;AACD,CAHD","sourceRoot":"C:\\Users\\USER\\Desktop\\platziverse\\platziverse-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nconst config = {\r\n  logging: function () {}\r\n}\r\n\r\nconst MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sandbox.resetHistory()\r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent service should exists')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n  t.true(MetricStub.hasMany.called, 'MetricModel.belongsTo was executed')\r\n})\r\n"]}