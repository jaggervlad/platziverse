{"version":3,"sources":["tests\\agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","id","uuid","AgentStub","db","sandbox","single","Object","assign","uuidArgs","where","usernameArgs","username","connected","connectedArgs","newAgent","name","hostname","pid","beforeEach","createSandbox","hasMany","create","stub","withArgs","returns","Promise","resolve","toJSON","update","findById","byId","findOne","byUuid","findAll","all","platzi","setupDatabase","afterEach","resetHistory","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","findByUuid","agents","findConnected","is","length","findByUsername","createOrUpdate","calledTwice"],"mappings":"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","sourceRoot":"C:\\Users\\USER\\Desktop\\platziverse\\platziverse-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nconst config = {\r\n  logging () {}\r\n}\r\n\r\nconst MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nconst id = 1\r\nconst uuid = 'yyy-yyy-yyy'\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n// Obtenemos un unico agente para poder hacer las pruebas\r\nconst single = Object.assign({}, agentFixtures.single)\r\n// Condicion  para obt a un agent por uuid\r\nconst uuidArgs = {\r\n  where: {\r\n    uuid\r\n  }\r\n}\r\nconst usernameArgs = {\r\n  where: { username: 'platzi', connected: true }\r\n}\r\nconst connectedArgs = {\r\n  where: { connected: true }\r\n}\r\nconst newAgent = {\r\n  uuid: '123-123-123',\r\n  name: 'test',\r\n  username: 'test',\r\n  hostname: 'test',\r\n  pid: 0,\r\n  connected: false\r\n}\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n\r\n  // Modelo hasMany() ORM sequelize\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  // Modelo create Stub\r\n  AgentStub.create = sandbox.stub()\r\n  AgentStub.create.withArgs(newAgent).returns(Promise.resolve({\r\n    toJSON () { return newAgent }\r\n  }))\r\n  \r\n  // Modelo update Stub\r\n  AgentStub.update = sandbox.stub()\r\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\r\n\r\n  // Modelo findById Stub\r\n  AgentStub.findById = sandbox.stub()\r\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\r\n\r\n  // Modelo findOne Stub\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\r\n\r\n  // Modelo findAll Stub\r\n  AgentStub.findAll = sandbox.stub()\r\n  AgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all))\r\n  AgentStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected))\r\n  AgentStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.platzi))\r\n\r\n  // Requerir los modelos con parametros por default\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sinon.resetHistory()\r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent service should exists')\r\n})\r\n\r\n// Tests para saber que los modelos estab bien relacionados en la DataBase\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})\r\n\r\n// Test para saber si el modelo Agent tiene el metodo findById\r\ntest.serial('Agent#findById', async t => {\r\n  const agent = await db.Agent.findById(id)\r\n\r\n  t.true(AgentStub.findById.called, 'findById should be called on model')\r\n  t.true(AgentStub.findById.calledOnce, 'findById should be called once')\r\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called whit specifie id')\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\r\n})\r\n\r\n// Test para saber si el modelo Agent tiene el metodo findByUuid\r\ntest.serial('Agent#findByUuid', async t => {\r\n  const agent = await db.Agent.findByUuid(uuid)\r\n\r\n  t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n  t.true(AgentStub.findOne.calledOnce, 'findById should be called once')\r\n  t.true(AgentStub.findOne.calledWith(uuidArgs), 'findOne should be called with uuid args')\r\n\r\n  t.deepEqual(agent, agentFixtures.byUuid(uuid), 'agent should be the same')\r\n})\r\n\r\n// Test para saber si el modelo Agent tiene el metodo findAll\r\ntest.serial('Agent#findAll', async t => {\r\n  const agent = await db.Agent.findAll()\r\n\r\n  t.true(AgentStub.findAll.called, 'findAll should be called on model')\r\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(AgentStub.findAll.calledWith(), 'findAll should be called with uuid args')\r\n\r\n  t.deepEqual(agent, agentFixtures.all, 'agents should be the same')\r\n})\r\n\r\n// Test para saber si el modelo Agent tiene el metodo findConnected\r\ntest.serial('Agent#findConnected', async t => {\r\n  const agents = await db.Agent.findConnected()\r\n\r\n  t.true(AgentStub.findAll.called, 'findAll should be called on model')\r\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(AgentStub.findAll.calledWith(connectedArgs), 'findAll should be called with connected args')\r\n\r\n  t.is(agents.length, agentFixtures.connected.length, 'agents should be the same amount')\r\n  t.deepEqual(agents, agentFixtures.connected, 'agents should be the same')\r\n})\r\n\r\n// Test para saber si el modelo Agent tiene el metodo findbyUsername\r\ntest.serial('Agent#findByUsername', async t => {\r\n  const agents = await db.Agent.findByUsername('platzi')\r\n\r\n  t.true(AgentStub.findAll.called, 'findAll should be called on model')\r\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(AgentStub.findAll.calledWith(usernameArgs), 'findAll should be called with username args')\r\n\r\n  t.is(agents.length, agentFixtures.platzi.length, 'agents should be the same amount')\r\n  t.deepEqual(agents, agentFixtures.platzi, 'agents should be the same')\r\n})\r\n\r\n// Test para saber si el modelo Agent tiene el metodo createOrUpdate() cuando este existe\r\ntest.serial('Agent#createOrUpdate where - exists', async t => {\r\n  const agent = await db.Agent.createOrUpdate(single)\r\n\r\n  t.true(AgentStub.findOne.called, 'findOne should be called the model')\r\n  t.true(AgentStub.findOne.calledTwice, 'should be called twice')\r\n  t.true(AgentStub.update.calledOnce, 'should be called once')\r\n  t.deepEqual(agent, single, 'agent should be the same')\r\n})\r\n\r\n// Test para saber si el modelo Agent tiene el metodo createOrUpdate() cuando es nuevo\r\ntest.serial('Agent#createOrUpdate where - new', async t => {\r\n  const agent = await db.Agent.createOrUpdate(newAgent)\r\n\r\n  t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n  t.true(AgentStub.findOne.calledOnce, 'should be called once')\r\n  t.true(AgentStub.findOne.calledWith({\r\n    where: { uuid: newAgent.uuid }\r\n  }), 'findOne should be called with uuid args')\r\n  t.true(AgentStub.create.called, 'should be called on model')\r\n  t.true(AgentStub.create.calledOnce, 'should be called once')\r\n  t.true(AgentStub.create.calledWith(newAgent), 'create should be called')\r\n\r\n  t.deepEqual(agent, newAgent, 'agent should be the same')\r\n})\r\n"]}