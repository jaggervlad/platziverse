'use strict';var cov_1q9js9550v=function(){var path="C:\\Users\\USER\\Desktop\\platziverse\\platziverse-db\\tests\\agent-tests.js";var hash="988d05ea42fc92ae1a1f2ce8fbf3dec823091561";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\USER\\Desktop\\platziverse\\platziverse-db\\tests\\agent-tests.js",statementMap:{"0":{start:{line:3,column:13},end:{line:3,column:27}},"1":{start:{line:5,column:14},end:{line:5,column:30}},"2":{start:{line:7,column:19},end:{line:7,column:40}},"3":{start:{line:9,column:22},end:{line:9,column:49}},"4":{start:{line:11,column:15},end:{line:14,column:1}},"5":{start:{line:15,column:19},end:{line:17,column:1}},"6":{start:{line:18,column:11},end:{line:18,column:12}},"7":{start:{line:19,column:13},end:{line:19,column:26}},"8":{start:{line:20,column:16},end:{line:20,column:20}},"9":{start:{line:21,column:9},end:{line:21,column:13}},"10":{start:{line:22,column:14},end:{line:22,column:18}},"11":{start:{line:24,column:15},end:{line:24,column:54}},"12":{start:{line:26,column:17},end:{line:30,column:1}},"13":{start:{line:31,column:21},end:{line:36,column:1}},"14":{start:{line:37,column:22},end:{line:41,column:1}},"15":{start:{line:42,column:17},end:{line:49,column:1}},"16":{start:{line:50,column:0},end:{line:83,column:3}},"17":{start:{line:51,column:2},end:{line:51,column:34}},"18":{start:{line:52,column:2},end:{line:54,column:4}},"19":{start:{line:56,column:2},end:{line:56,column:36}},"20":{start:{line:57,column:2},end:{line:62,column:6}},"21":{start:{line:59,column:6},end:{line:59,column:22}},"22":{start:{line:64,column:2},end:{line:64,column:37}},"23":{start:{line:65,column:2},end:{line:65,column:92}},"24":{start:{line:67,column:2},end:{line:67,column:36}},"25":{start:{line:68,column:2},end:{line:68,column:79}},"26":{start:{line:70,column:2},end:{line:70,column:38}},"27":{start:{line:71,column:2},end:{line:71,column:83}},"28":{start:{line:73,column:2},end:{line:73,column:36}},"29":{start:{line:74,column:2},end:{line:74,column:74}},"30":{start:{line:75,column:2},end:{line:75,column:93}},"31":{start:{line:76,column:2},end:{line:76,column:89}},"32":{start:{line:78,column:24},end:{line:81,column:4}},"33":{start:{line:79,column:28},end:{line:79,column:37}},"34":{start:{line:80,column:29},end:{line:80,column:39}},"35":{start:{line:82,column:2},end:{line:82,column:35}},"36":{start:{line:84,column:0},end:{line:86,column:3}},"37":{start:{line:85,column:2},end:{line:85,column:34}},"38":{start:{line:87,column:0},end:{line:89,column:3}},"39":{start:{line:88,column:2},end:{line:88,column:52}},"40":{start:{line:91,column:0},end:{line:96,column:3}},"41":{start:{line:92,column:2},end:{line:92,column:70}},"42":{start:{line:93,column:2},end:{line:93,column:89}},"43":{start:{line:94,column:2},end:{line:94,column:76}},"44":{start:{line:95,column:2},end:{line:95,column:90}},"45":{start:{line:98,column:0},end:{line:104,column:3}},"46":{start:{line:99,column:16},end:{line:99,column:43}},"47":{start:{line:100,column:2},end:{line:100,column:74}},"48":{start:{line:101,column:2},end:{line:101,column:74}},"49":{start:{line:102,column:2},end:{line:102,column:90}},"50":{start:{line:103,column:2},end:{line:103,column:67}},"51":{start:{line:106,column:0},end:{line:112,column:3}},"52":{start:{line:107,column:16},end:{line:107,column:47}},"53":{start:{line:108,column:2},end:{line:108,column:72}},"54":{start:{line:109,column:2},end:{line:109,column:73}},"55":{start:{line:110,column:2},end:{line:110,column:92}},"56":{start:{line:111,column:2},end:{line:111,column:77}},"57":{start:{line:114,column:0},end:{line:120,column:3}},"58":{start:{line:115,column:16},end:{line:115,column:40}},"59":{start:{line:116,column:2},end:{line:116,column:72}},"60":{start:{line:117,column:2},end:{line:117,column:72}},"61":{start:{line:118,column:2},end:{line:118,column:84}},"62":{start:{line:119,column:2},end:{line:119,column:69}},"63":{start:{line:122,column:0},end:{line:129,column:3}},"64":{start:{line:123,column:17},end:{line:123,column:47}},"65":{start:{line:124,column:2},end:{line:124,column:72}},"66":{start:{line:125,column:2},end:{line:125,column:72}},"67":{start:{line:126,column:2},end:{line:126,column:102}},"68":{start:{line:127,column:2},end:{line:127,column:90}},"69":{start:{line:128,column:2},end:{line:128,column:76}},"70":{start:{line:131,column:0},end:{line:138,column:3}},"71":{start:{line:132,column:16},end:{line:132,column:55}},"72":{start:{line:133,column:2},end:{line:133,column:72}},"73":{start:{line:134,column:2},end:{line:134,column:72}},"74":{start:{line:135,column:2},end:{line:135,column:100}},"75":{start:{line:136,column:2},end:{line:136,column:86}},"76":{start:{line:137,column:2},end:{line:137,column:72}},"77":{start:{line:140,column:0},end:{line:146,column:3}},"78":{start:{line:141,column:16},end:{line:141,column:53}},"79":{start:{line:142,column:2},end:{line:142,column:73}},"80":{start:{line:143,column:2},end:{line:143,column:66}},"81":{start:{line:144,column:2},end:{line:144,column:63}},"82":{start:{line:145,column:2},end:{line:145,column:57}},"83":{start:{line:148,column:0},end:{line:161,column:3}},"84":{start:{line:149,column:16},end:{line:149,column:55}},"85":{start:{line:150,column:2},end:{line:150,column:72}},"86":{start:{line:151,column:2},end:{line:151,column:64}},"87":{start:{line:152,column:2},end:{line:156,column:49}},"88":{start:{line:157,column:2},end:{line:157,column:63}},"89":{start:{line:158,column:2},end:{line:158,column:63}},"90":{start:{line:159,column:2},end:{line:159,column:75}},"91":{start:{line:160,column:2},end:{line:160,column:59}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:2},end:{line:12,column:3}},loc:{start:{line:12,column:12},end:{line:12,column:14}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:50,column:16},end:{line:50,column:17}},loc:{start:{line:50,column:28},end:{line:83,column:1}},line:50},"2":{name:"(anonymous_2)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:13},end:{line:60,column:5}},line:58},"3":{name:"(anonymous_3)",decl:{start:{line:79,column:22},end:{line:79,column:23}},loc:{start:{line:79,column:28},end:{line:79,column:37}},line:79},"4":{name:"(anonymous_4)",decl:{start:{line:80,column:23},end:{line:80,column:24}},loc:{start:{line:80,column:29},end:{line:80,column:39}},line:80},"5":{name:"(anonymous_5)",decl:{start:{line:84,column:15},end:{line:84,column:16}},loc:{start:{line:84,column:21},end:{line:86,column:1}},line:84},"6":{name:"(anonymous_6)",decl:{start:{line:87,column:14},end:{line:87,column:15}},loc:{start:{line:87,column:19},end:{line:89,column:1}},line:87},"7":{name:"(anonymous_7)",decl:{start:{line:91,column:21},end:{line:91,column:22}},loc:{start:{line:91,column:26},end:{line:96,column:1}},line:91},"8":{name:"(anonymous_8)",decl:{start:{line:98,column:30},end:{line:98,column:31}},loc:{start:{line:98,column:41},end:{line:104,column:1}},line:98},"9":{name:"(anonymous_9)",decl:{start:{line:106,column:32},end:{line:106,column:33}},loc:{start:{line:106,column:43},end:{line:112,column:1}},line:106},"10":{name:"(anonymous_10)",decl:{start:{line:114,column:29},end:{line:114,column:30}},loc:{start:{line:114,column:40},end:{line:120,column:1}},line:114},"11":{name:"(anonymous_11)",decl:{start:{line:122,column:35},end:{line:122,column:36}},loc:{start:{line:122,column:46},end:{line:129,column:1}},line:122},"12":{name:"(anonymous_12)",decl:{start:{line:131,column:36},end:{line:131,column:37}},loc:{start:{line:131,column:47},end:{line:138,column:1}},line:131},"13":{name:"(anonymous_13)",decl:{start:{line:140,column:51},end:{line:140,column:52}},loc:{start:{line:140,column:62},end:{line:146,column:1}},line:140},"14":{name:"(anonymous_14)",decl:{start:{line:148,column:48},end:{line:148,column:49}},loc:{start:{line:148,column:59},end:{line:161,column:1}},line:148}},branchMap:{"0":{loc:{start:{line:85,column:2},end:{line:85,column:33}},type:"binary-expr",locations:[{start:{line:85,column:2},end:{line:85,column:9}},{start:{line:85,column:13},end:{line:85,column:33}}],line:85}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"988d05ea42fc92ae1a1f2ce8fbf3dec823091561"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const test=(cov_1q9js9550v.s[0]++,require('ava'));const sinon=(cov_1q9js9550v.s[1]++,require('sinon'));const proxyquire=(cov_1q9js9550v.s[2]++,require('proxyquire'));const agentFixtures=(cov_1q9js9550v.s[3]++,require('./fixtures/agent'));const config=(cov_1q9js9550v.s[4]++,{logging(){cov_1q9js9550v.f[0]++;}});const MetricStub=(cov_1q9js9550v.s[5]++,{belongsTo:sinon.spy()});const id=(cov_1q9js9550v.s[6]++,1);const uuid=(cov_1q9js9550v.s[7]++,'yyy-yyy-yyy');let AgentStub=(cov_1q9js9550v.s[8]++,null);let db=(cov_1q9js9550v.s[9]++,null);let sandbox=(cov_1q9js9550v.s[10]++,null);// Obtenemos un unico agente para poder hacer las pruebas
const single=(cov_1q9js9550v.s[11]++,Object.assign({},agentFixtures.single));// Condicion  para obt a un agent por uuid
const uuidArgs=(cov_1q9js9550v.s[12]++,{where:{uuid}});const usernameArgs=(cov_1q9js9550v.s[13]++,{where:{username:'platzi',connected:true}});const connectedArgs=(cov_1q9js9550v.s[14]++,{where:{connected:true}});const newAgent=(cov_1q9js9550v.s[15]++,{uuid:'123-123-123',name:'test',username:'test',hostname:'test',pid:0,connected:false});cov_1q9js9550v.s[16]++;test.beforeEach(async()=>{cov_1q9js9550v.f[1]++;cov_1q9js9550v.s[17]++;sandbox=sinon.createSandbox();cov_1q9js9550v.s[18]++;AgentStub={hasMany:sandbox.spy()};// Modelo create Stub
cov_1q9js9550v.s[19]++;AgentStub.create=sandbox.stub();cov_1q9js9550v.s[20]++;AgentStub.create.withArgs(newAgent).returns(Promise.resolve({toJSON(){cov_1q9js9550v.f[2]++;cov_1q9js9550v.s[21]++;return newAgent;}}));// Modelo findOne Stub
cov_1q9js9550v.s[22]++;AgentStub.findOne=sandbox.stub();cov_1q9js9550v.s[23]++;AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)));// Modelo update Stub
cov_1q9js9550v.s[24]++;AgentStub.update=sandbox.stub();cov_1q9js9550v.s[25]++;AgentStub.update.withArgs(single,uuidArgs).returns(Promise.resolve(single));// Modelo findById Stub
cov_1q9js9550v.s[26]++;AgentStub.findById=sandbox.stub();cov_1q9js9550v.s[27]++;AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)));// Modelo findAll Stub
cov_1q9js9550v.s[28]++;AgentStub.finAll=sandbox.stub();cov_1q9js9550v.s[29]++;AgentStub.finAll.withArgs().returns(Promise.resolve(agentFixtures.all));cov_1q9js9550v.s[30]++;AgentStub.finAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected));cov_1q9js9550v.s[31]++;AgentStub.finAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.platzi));// Requerir los modelos con parametros por default
const setupDatabase=(cov_1q9js9550v.s[32]++,proxyquire('../',{'./models/agent':()=>{cov_1q9js9550v.f[3]++;cov_1q9js9550v.s[33]++;return AgentStub;},'./models/metric':()=>{cov_1q9js9550v.f[4]++;cov_1q9js9550v.s[34]++;return MetricStub;}}));cov_1q9js9550v.s[35]++;db=await setupDatabase(config);});cov_1q9js9550v.s[36]++;test.afterEach(()=>{cov_1q9js9550v.f[5]++;cov_1q9js9550v.s[37]++;(cov_1q9js9550v.b[0][0]++,sandbox)&&(cov_1q9js9550v.b[0][1]++,sinon.resetHistory());});cov_1q9js9550v.s[38]++;test('Agent',t=>{cov_1q9js9550v.f[6]++;cov_1q9js9550v.s[39]++;t.truthy(db.Agent,'Agent service should exists');});// Tests para saber que los modelos estab bien relacionados en la DataBase
cov_1q9js9550v.s[40]++;test.serial('Setup',t=>{cov_1q9js9550v.f[7]++;cov_1q9js9550v.s[41]++;t.true(AgentStub.hasMany.called,'AgentModel.hasMany was executed');cov_1q9js9550v.s[42]++;t.true(AgentStub.hasMany.calledWith(MetricStub),'Argument should be the MetricModel');cov_1q9js9550v.s[43]++;t.true(MetricStub.belongsTo.called,'MetricModel.belongsTo was executed');cov_1q9js9550v.s[44]++;t.true(MetricStub.belongsTo.calledWith(AgentStub),'Argument should be the AgentModel');});// Test para saber si el modelo Agent tiene el metodo findById
cov_1q9js9550v.s[45]++;test.serial('Agent#findById',async t=>{cov_1q9js9550v.f[8]++;const agent=(cov_1q9js9550v.s[46]++,await db.Agent.findById(id));cov_1q9js9550v.s[47]++;t.true(AgentStub.findById.called,'findById should be called on model');cov_1q9js9550v.s[48]++;t.true(AgentStub.findById.calledOnce,'findById should be called once');cov_1q9js9550v.s[49]++;t.true(AgentStub.findById.calledWith(id),'findById should be called whit specifie id');cov_1q9js9550v.s[50]++;t.deepEqual(agent,agentFixtures.byId(id),'should be the same');});// Test para saber si el modelo Agent tiene el metodo findByUuid
cov_1q9js9550v.s[51]++;test.serial('Agent#findByUuid',async t=>{cov_1q9js9550v.f[9]++;const agent=(cov_1q9js9550v.s[52]++,await db.Agent.findByUuid(uuid));cov_1q9js9550v.s[53]++;t.true(AgentStub.findOne.called,'findOne should be called on model');cov_1q9js9550v.s[54]++;t.true(AgentStub.findOne.calledOnce,'findById should be called once');cov_1q9js9550v.s[55]++;t.true(AgentStub.findOne.calledWith(uuidArgs),'findOne should be called with uuid args');cov_1q9js9550v.s[56]++;t.deepEqual(agent,agentFixtures.byUuid(uuid),'agent should be the same');});// Test para saber si el modelo Agent tiene el metodo findAll
cov_1q9js9550v.s[57]++;test.serial('Agent#findAll',async t=>{cov_1q9js9550v.f[10]++;const agent=(cov_1q9js9550v.s[58]++,await db.Agent.findAll());cov_1q9js9550v.s[59]++;t.true(AgentStub.findAll.called,'findAll should be called on model');cov_1q9js9550v.s[60]++;t.true(AgentStub.findAll.calledOnce,'findAll should be called once');cov_1q9js9550v.s[61]++;t.true(AgentStub.findAll.calledWith(),'findAll should be called with uuid args');cov_1q9js9550v.s[62]++;t.deepEqual(agent,agentFixtures.all,'agents should be the same');});// Test para saber si el modelo Agent tiene el metodo findConnected
cov_1q9js9550v.s[63]++;test.serial('Agent#findConnected',async t=>{cov_1q9js9550v.f[11]++;const agents=(cov_1q9js9550v.s[64]++,await db.Agent.findConnected());cov_1q9js9550v.s[65]++;t.true(AgentStub.findAll.called,'findAll should be called on model');cov_1q9js9550v.s[66]++;t.true(AgentStub.findAll.calledOnce,'findAll should be called once');cov_1q9js9550v.s[67]++;t.true(AgentStub.findAll.calledWith(connectedArgs),'findAll should be called with connected args');cov_1q9js9550v.s[68]++;t.is(agents.length,agentFixtures.connected.length,'agents should be the same amount');cov_1q9js9550v.s[69]++;t.deepEqual(agents,agentFixtures.connected,'agents should be the same');});// Test para saber si el modelo Agent tiene el metodo findbyUsername
cov_1q9js9550v.s[70]++;test.serial('Agent#findByUsername',async t=>{cov_1q9js9550v.f[12]++;const agent=(cov_1q9js9550v.s[71]++,await db.Agent.findbyUsername('platzi'));cov_1q9js9550v.s[72]++;t.true(AgentStub.findAll.called,'findAll should be called on model');cov_1q9js9550v.s[73]++;t.true(AgentStub.findAll.calledOnce,'findAll should be called once');cov_1q9js9550v.s[74]++;t.true(AgentStub.findAll.calledWith(usernameArgs),'findAll should be called with username args');cov_1q9js9550v.s[75]++;t.is(agent.length,agentFixtures.platzi.length,'agents should be the same amount');cov_1q9js9550v.s[76]++;t.deepEqual(agent,agentFixtures.platzi,'agents should be the same');});// Test para saber si el modelo Agent tiene el metodo createOrUpdate() cuando este existe
cov_1q9js9550v.s[77]++;test.serial('Agent#createOrUpdate where - exists',async t=>{cov_1q9js9550v.f[13]++;const agent=(cov_1q9js9550v.s[78]++,await db.Agent.createOrUpdate(single));cov_1q9js9550v.s[79]++;t.true(AgentStub.findOne.called,'findOne should be called the model');cov_1q9js9550v.s[80]++;t.true(AgentStub.findOne.calledTwice,'should be called twice');cov_1q9js9550v.s[81]++;t.true(AgentStub.update.calledOnce,'should be called once');cov_1q9js9550v.s[82]++;t.deepEqual(agent,single,'agent should be the same');});// Test para saber si el modelo Agent tiene el metodo createOrUpdate() cuando es nuevo
cov_1q9js9550v.s[83]++;test.serial('Agent#createOrUpdate where - new',async t=>{cov_1q9js9550v.f[14]++;const agent=(cov_1q9js9550v.s[84]++,await db.Agent.createOrUpdate(newAgent));cov_1q9js9550v.s[85]++;t.true(AgentStub.findOne.called,'findOne should be called on model');cov_1q9js9550v.s[86]++;t.true(AgentStub.findOne.calledOnce,'should be called once');cov_1q9js9550v.s[87]++;t.true(AgentStub.findOne.calledWith({where:{uuid:newAgent.uuid}}),'findOne should be called with uuid args');cov_1q9js9550v.s[88]++;t.true(AgentStub.create.called,'should be called on model');cov_1q9js9550v.s[89]++;t.true(AgentStub.create.calledOnce,'should be called once');cov_1q9js9550v.s[90]++;t.true(AgentStub.create.calledWith(newAgent),'create should be called');cov_1q9js9550v.s[91]++;t.deepEqual(agent,newAgent,'agent should be the same');});//# sourceMappingURL=C:\Users\USER\Desktop\platziverse\platziverse-db\node_modules\.cache\ava\bc242312aa4e71c6700a7b468dbaa09f.js.map